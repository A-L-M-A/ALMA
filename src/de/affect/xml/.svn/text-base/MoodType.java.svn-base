/*
 * XML Type:  MoodType
 * Namespace: xml.affect.de
 * Java type: de.affect.xml.MoodType
 *
 * Automatically generated - do not modify.
 */
package de.affect.xml;


/**
 * An XML MoodType(@xml.affect.de).
 *
 * This is a complex type.
 */
public interface MoodType extends org.apache.xmlbeans.XmlObject
{
    public static final org.apache.xmlbeans.SchemaType type = (org.apache.xmlbeans.SchemaType)
        org.apache.xmlbeans.XmlBeans.typeSystemForClassLoader(MoodType.class.getClassLoader(), "schemaorg_apache_xmlbeans.system.s876F60A6E4A4858327667D81EFEC6F41").resolveHandle("moodtype637dtype");
    
    /**
     * Gets the "moodword" attribute
     */
    de.affect.xml.MoodWord.Enum getMoodword();
    
    /**
     * Gets (as xml) the "moodword" attribute
     */
    de.affect.xml.MoodWord xgetMoodword();
    
    /**
     * Sets the "moodword" attribute
     */
    void setMoodword(de.affect.xml.MoodWord.Enum moodword);
    
    /**
     * Sets (as xml) the "moodword" attribute
     */
    void xsetMoodword(de.affect.xml.MoodWord moodword);
    
    /**
     * Gets the "intensity" attribute
     */
    de.affect.xml.MoodType.Intensity.Enum getIntensity();
    
    /**
     * Gets (as xml) the "intensity" attribute
     */
    de.affect.xml.MoodType.Intensity xgetIntensity();
    
    /**
     * Sets the "intensity" attribute
     */
    void setIntensity(de.affect.xml.MoodType.Intensity.Enum intensity);
    
    /**
     * Sets (as xml) the "intensity" attribute
     */
    void xsetIntensity(de.affect.xml.MoodType.Intensity intensity);
    
    /**
     * Gets the "pleasure" attribute
     */
    double getPleasure();
    
    /**
     * Gets (as xml) the "pleasure" attribute
     */
    de.affect.xml.SignedIntensity xgetPleasure();
    
    /**
     * True if has "pleasure" attribute
     */
    boolean isSetPleasure();
    
    /**
     * Sets the "pleasure" attribute
     */
    void setPleasure(double pleasure);
    
    /**
     * Sets (as xml) the "pleasure" attribute
     */
    void xsetPleasure(de.affect.xml.SignedIntensity pleasure);
    
    /**
     * Unsets the "pleasure" attribute
     */
    void unsetPleasure();
    
    /**
     * Gets the "arousal" attribute
     */
    double getArousal();
    
    /**
     * Gets (as xml) the "arousal" attribute
     */
    de.affect.xml.SignedIntensity xgetArousal();
    
    /**
     * True if has "arousal" attribute
     */
    boolean isSetArousal();
    
    /**
     * Sets the "arousal" attribute
     */
    void setArousal(double arousal);
    
    /**
     * Sets (as xml) the "arousal" attribute
     */
    void xsetArousal(de.affect.xml.SignedIntensity arousal);
    
    /**
     * Unsets the "arousal" attribute
     */
    void unsetArousal();
    
    /**
     * Gets the "dominance" attribute
     */
    double getDominance();
    
    /**
     * Gets (as xml) the "dominance" attribute
     */
    de.affect.xml.SignedIntensity xgetDominance();
    
    /**
     * True if has "dominance" attribute
     */
    boolean isSetDominance();
    
    /**
     * Sets the "dominance" attribute
     */
    void setDominance(double dominance);
    
    /**
     * Sets (as xml) the "dominance" attribute
     */
    void xsetDominance(de.affect.xml.SignedIntensity dominance);
    
    /**
     * Unsets the "dominance" attribute
     */
    void unsetDominance();
    
    /**
     * An XML intensity(@).
     *
     * This is an atomic type that is a restriction of de.affect.xml.MoodType$Intensity.
     */
    public interface Intensity extends org.apache.xmlbeans.XmlString
    {
        public static final org.apache.xmlbeans.SchemaType type = (org.apache.xmlbeans.SchemaType)
            org.apache.xmlbeans.XmlBeans.typeSystemForClassLoader(Intensity.class.getClassLoader(), "schemaorg_apache_xmlbeans.system.s876F60A6E4A4858327667D81EFEC6F41").resolveHandle("intensity2842attrtype");
        
        org.apache.xmlbeans.StringEnumAbstractBase enumValue();
        void set(org.apache.xmlbeans.StringEnumAbstractBase e);
        
        static final Enum SLIGHTLY = Enum.forString("slightly");
        static final Enum MODERATE = Enum.forString("moderate");
        static final Enum FULLY = Enum.forString("fully");
        static final Enum NEUTRAL = Enum.forString("neutral");
        
        static final int INT_SLIGHTLY = Enum.INT_SLIGHTLY;
        static final int INT_MODERATE = Enum.INT_MODERATE;
        static final int INT_FULLY = Enum.INT_FULLY;
        static final int INT_NEUTRAL = Enum.INT_NEUTRAL;
        
        /**
         * Enumeration value class for de.affect.xml.MoodType$Intensity.
         * These enum values can be used as follows:
         * <pre>
         * enum.toString(); // returns the string value of the enum
         * enum.intValue(); // returns an int value, useful for switches
         * // e.g., case Enum.INT_SLIGHTLY
         * Enum.forString(s); // returns the enum value for a string
         * Enum.forInt(i); // returns the enum value for an int
         * </pre>
         * Enumeration objects are immutable singleton objects that
         * can be compared using == object equality. They have no
         * public constructor. See the constants defined within this
         * class for all the valid values.
         */
        static final class Enum extends org.apache.xmlbeans.StringEnumAbstractBase
        {
            /**
             * Returns the enum value for a string, or null if none.
             */
            public static Enum forString(java.lang.String s)
                { return (Enum)table.forString(s); }
            /**
             * Returns the enum value corresponding to an int, or null if none.
             */
            public static Enum forInt(int i)
                { return (Enum)table.forInt(i); }
            
            private Enum(java.lang.String s, int i)
                { super(s, i); }
            
            static final int INT_SLIGHTLY = 1;
            static final int INT_MODERATE = 2;
            static final int INT_FULLY = 3;
            static final int INT_NEUTRAL = 4;
            
            public static final org.apache.xmlbeans.StringEnumAbstractBase.Table table =
                new org.apache.xmlbeans.StringEnumAbstractBase.Table
            (
                new Enum[]
                {
                    new Enum("slightly", INT_SLIGHTLY),
                    new Enum("moderate", INT_MODERATE),
                    new Enum("fully", INT_FULLY),
                    new Enum("neutral", INT_NEUTRAL),
                }
            );
            private static final long serialVersionUID = 1L;
            private java.lang.Object readResolve() { return forInt(intValue()); } 
        }
        
        /**
         * A factory class with static methods for creating instances
         * of this type.
         */
        
        public static final class Factory
        {
            public static de.affect.xml.MoodType.Intensity newValue(java.lang.Object obj) {
              return (de.affect.xml.MoodType.Intensity) type.newValue( obj ); }
            
            public static de.affect.xml.MoodType.Intensity newInstance() {
              return (de.affect.xml.MoodType.Intensity) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().newInstance( type, null ); }
            
            public static de.affect.xml.MoodType.Intensity newInstance(org.apache.xmlbeans.XmlOptions options) {
              return (de.affect.xml.MoodType.Intensity) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().newInstance( type, options ); }
            
            private Factory() { } // No instance of this class allowed
        }
    }
    
    /**
     * A factory class with static methods for creating instances
     * of this type.
     */
    
    public static final class Factory
    {
        public static de.affect.xml.MoodType newInstance() {
          return (de.affect.xml.MoodType) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().newInstance( type, null ); }
        
        public static de.affect.xml.MoodType newInstance(org.apache.xmlbeans.XmlOptions options) {
          return (de.affect.xml.MoodType) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().newInstance( type, options ); }
        
        /** @param xmlAsString the string value to parse */
        public static de.affect.xml.MoodType parse(java.lang.String xmlAsString) throws org.apache.xmlbeans.XmlException {
          return (de.affect.xml.MoodType) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( xmlAsString, type, null ); }
        
        public static de.affect.xml.MoodType parse(java.lang.String xmlAsString, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException {
          return (de.affect.xml.MoodType) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( xmlAsString, type, options ); }
        
        /** @param file the file from which to load an xml document */
        public static de.affect.xml.MoodType parse(java.io.File file) throws org.apache.xmlbeans.XmlException, java.io.IOException {
          return (de.affect.xml.MoodType) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( file, type, null ); }
        
        public static de.affect.xml.MoodType parse(java.io.File file, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException, java.io.IOException {
          return (de.affect.xml.MoodType) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( file, type, options ); }
        
        public static de.affect.xml.MoodType parse(java.net.URL u) throws org.apache.xmlbeans.XmlException, java.io.IOException {
          return (de.affect.xml.MoodType) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( u, type, null ); }
        
        public static de.affect.xml.MoodType parse(java.net.URL u, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException, java.io.IOException {
          return (de.affect.xml.MoodType) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( u, type, options ); }
        
        public static de.affect.xml.MoodType parse(java.io.InputStream is) throws org.apache.xmlbeans.XmlException, java.io.IOException {
          return (de.affect.xml.MoodType) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( is, type, null ); }
        
        public static de.affect.xml.MoodType parse(java.io.InputStream is, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException, java.io.IOException {
          return (de.affect.xml.MoodType) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( is, type, options ); }
        
        public static de.affect.xml.MoodType parse(java.io.Reader r) throws org.apache.xmlbeans.XmlException, java.io.IOException {
          return (de.affect.xml.MoodType) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( r, type, null ); }
        
        public static de.affect.xml.MoodType parse(java.io.Reader r, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException, java.io.IOException {
          return (de.affect.xml.MoodType) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( r, type, options ); }
        
        public static de.affect.xml.MoodType parse(javax.xml.stream.XMLStreamReader sr) throws org.apache.xmlbeans.XmlException {
          return (de.affect.xml.MoodType) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( sr, type, null ); }
        
        public static de.affect.xml.MoodType parse(javax.xml.stream.XMLStreamReader sr, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException {
          return (de.affect.xml.MoodType) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( sr, type, options ); }
        
        public static de.affect.xml.MoodType parse(org.w3c.dom.Node node) throws org.apache.xmlbeans.XmlException {
          return (de.affect.xml.MoodType) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( node, type, null ); }
        
        public static de.affect.xml.MoodType parse(org.w3c.dom.Node node, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException {
          return (de.affect.xml.MoodType) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( node, type, options ); }
        
        /** @deprecated {@link XMLInputStream} */
        public static de.affect.xml.MoodType parse(org.apache.xmlbeans.xml.stream.XMLInputStream xis) throws org.apache.xmlbeans.XmlException, org.apache.xmlbeans.xml.stream.XMLStreamException {
          return (de.affect.xml.MoodType) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( xis, type, null ); }
        
        /** @deprecated {@link XMLInputStream} */
        public static de.affect.xml.MoodType parse(org.apache.xmlbeans.xml.stream.XMLInputStream xis, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException, org.apache.xmlbeans.xml.stream.XMLStreamException {
          return (de.affect.xml.MoodType) org.apache.xmlbeans.XmlBeans.getContextTypeLoader().parse( xis, type, options ); }
        
        /** @deprecated {@link XMLInputStream} */
        public static org.apache.xmlbeans.xml.stream.XMLInputStream newValidatingXMLInputStream(org.apache.xmlbeans.xml.stream.XMLInputStream xis) throws org.apache.xmlbeans.XmlException, org.apache.xmlbeans.xml.stream.XMLStreamException {
          return org.apache.xmlbeans.XmlBeans.getContextTypeLoader().newValidatingXMLInputStream( xis, type, null ); }
        
        /** @deprecated {@link XMLInputStream} */
        public static org.apache.xmlbeans.xml.stream.XMLInputStream newValidatingXMLInputStream(org.apache.xmlbeans.xml.stream.XMLInputStream xis, org.apache.xmlbeans.XmlOptions options) throws org.apache.xmlbeans.XmlException, org.apache.xmlbeans.xml.stream.XMLStreamException {
          return org.apache.xmlbeans.XmlBeans.getContextTypeLoader().newValidatingXMLInputStream( xis, type, options ); }
        
        private Factory() { } // No instance of this class allowed
    }
}
