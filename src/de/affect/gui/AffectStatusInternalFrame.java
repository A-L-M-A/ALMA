/* * AffectStatusInternalFrame.java * * Copyright (c) 2005 by Patrick Gebhard * All rights reserved. * */package de.affect.gui;import de.affect.emotion.EmotionType;import de.affect.emotion.EmotionsPADRelation;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dimension;import java.awt.Font;import java.awt.GraphicsEnvironment;import static java.awt.Font.BOLD;import static java.awt.Font.PLAIN;import de.affect.mood.Mood;import de.affect.emotion.EmotionVector;import static de.affect.util.Convert.prettyPrint;/** * The <code>AffectStatusInternalFrame</code> displays all entity' affective status. * Information are given about the current mood and emotions respectively its  * actual intensity in a compact display. *  * @author Patrick Gebhard * * @version 1.0 */public class AffectStatusInternalFrame extends AlmaInternalFrame implements AffectStatusDisplay {  private boolean fIsReady = false;  private static final String sPREFFEREDFONT = "Arial";  public static Font sDefaultTextFont = null;  public static Font sDefaultTitleFont = null;  public static Font sDefaultBigTitleFont = null;  public static final Color sBORDERLINE = Color.LIGHT_GRAY;  private AffectStatusPanel fAffectStatusPanel = null;  /**   * Constructor    *    * @param entity name of the entity   *        emotions the initial emotion vector   *        mood the initial entity's mood   */  public AffectStatusInternalFrame(String entity, EmotionVector emotions, Mood currentMood) {    super(entity + "'s Affect Status", entity + "Status",  new Dimension(300, 120), false, true, false, true);    GraphicsEnvironment graphEnv = GraphicsEnvironment.getLocalGraphicsEnvironment();    String[] availableFonts = graphEnv.getAvailableFontFamilyNames();    sDefaultTextFont = getFont();    sDefaultTitleFont = getFont();    sDefaultBigTitleFont = getFont();    for (String font : availableFonts) {      if (font.equals(sPREFFEREDFONT)) {        sDefaultTextFont = new Font(font, PLAIN, 11);        sDefaultTitleFont = new Font(font, BOLD, 11);        sDefaultBigTitleFont = new Font(font, BOLD, 12);        setFont(sDefaultTextFont);      }    }    String currentMoodString =       currentMood.getMoodWordIntensity() + " " + currentMood.getMoodWord();    fAffectStatusPanel = new AffectStatusPanel(emotions.getDominantEmotion().getType().toString(),					       currentMoodString, currentMoodString, currentMoodString);    getContentPane().add(fAffectStatusPanel, BorderLayout.CENTER);  }  /**   * Updates the affectiv status display    *   * @param entity name of the entity   *	    emotions current emotions   *        defaultMood the character's default mood   *        currentMood the character's current mood   */  public void updateStatusDisplay(String entity, EmotionVector emotions, 				  Mood defaultMood, Mood currentMood, Mood currentMoodTendency) {      EmotionType et = emotions.getDominantEmotion().getType();      String emoPAD = "";      if (et != EmotionType.Undefined) {        emoPAD = (EmotionsPADRelation.getEmotionPADMapping(et)).padString();      }      String emotionString =        emotions.getDominantEmotion().getType() + " (" + prettyPrint(emotions.getDominantEmotion().getIntensity()) + ")" + emoPAD;    String currentMoodString = currentMood.toString();    String currenMoodTendencyString =       currentMoodTendency.getMoodWordIntensity() + " " + currentMoodTendency.getMoodWord();    String defaultMoodString =       defaultMood.getMoodWordIntensity() + " " + defaultMood.getMoodWord();    fAffectStatusPanel.updateStatus(emotionString,				    defaultMoodString, currentMoodString,				    currenMoodTendencyString);  }}